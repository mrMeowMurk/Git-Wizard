#!/usr/bin/env python3
import os
import sys
from datetime import datetime
from typing import List, Optional

import click
from git import Repo, GitCommandError
from rich.console import Console
from rich.table import Table
from rich.tree import Tree
from prompt_toolkit import PromptSession
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.styles import Style

console = Console()

class GitWizard:
    def __init__(self, repo_path: str = "."):
        self.repo_path = os.path.abspath(repo_path)
        try:
            self.repo = Repo(self.repo_path)
        except GitCommandError:
            console.print(f"[red]–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {repo_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º[/red]")
            sys.exit(1)
        
        self.session = PromptSession()
        self.commands = [
            "status", "branch", "log", "commit", "checkout",
            "merge", "pull", "push", "search", "stats", "graph"
        ]
        self.completer = WordCompleter(self.commands)
        self.style = Style.from_dict({
            'prompt': 'ansicyan bold',
        })

    def visualize_branches(self):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ç–æ–∫ –≤ –≤–∏–¥–µ ASCII-–≥—Ä–∞—Ñ–∞"""
        tree = Tree("üå≥ [bold green]–í–µ—Ç–∫–∏[/bold green]")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Ç–∫–∏
        branches = self.repo.heads
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É
        main_branch = self.repo.active_branch
        main_tree = tree.add(f"üåø [bold yellow]{main_branch.name}[/bold yellow]")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏
        for branch in branches:
            if branch.name != main_branch.name:
                main_tree.add(f"üå± {branch.name}")
        
        console.print(tree)

    def search_commits(self, query: str):
        """–ü–æ–∏—Å–∫ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        table = Table(title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {query}")
        table.add_column("–•–µ—à", style="cyan")
        table.add_column("–ê–≤—Ç–æ—Ä", style="magenta")
        table.add_column("–î–∞—Ç–∞", style="green")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="white")

        for commit in self.repo.iter_commits():
            if query.lower() in commit.message.lower():
                table.add_row(
                    commit.hexsha[:8],
                    commit.author.name,
                    datetime.fromtimestamp(commit.committed_date).strftime('%Y-%m-%d %H:%M'),
                    commit.message.split('\n')[0]
                )

        console.print(table)

    def show_activity_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∞–≤—Ç–æ—Ä–∞–º"""
        stats = {}
        
        for commit in self.repo.iter_commits():
            author = commit.author.name
            if author not in stats:
                stats[author] = 0
            stats[author] += 1

        table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        table.add_column("–ê–≤—Ç–æ—Ä", style="cyan")
        table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤", style="magenta")

        for author, count in sorted(stats.items(), key=lambda x: x[1], reverse=True):
            table.add_row(author, str(count))

        console.print(table)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        console.print("[bold green]–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GitWizard![/bold green]")
        console.print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        while True:
            try:
                command = self.session.prompt(
                    "gitwizard> ",
                    completer=self.completer,
                    style=self.style
                ).strip()

                if command == "exit":
                    break
                elif command == "help":
                    self.show_help()
                elif command == "graph":
                    self.visualize_branches()
                elif command.startswith("search "):
                    query = command[7:]
                    self.search_commits(query)
                elif command == "stats":
                    self.show_activity_stats()
                else:
                    console.print(f"[yellow]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}[/yellow]")

            except KeyboardInterrupt:
                continue
            except EOFError:
                break

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
[bold cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:[/bold cyan]
  graph    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ç–æ–∫
  search   - –ü–æ–∏—Å–∫ –∫–æ–º–º–∏—Ç–æ–≤
  stats    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  exit     - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        """
        console.print(help_text)

@click.command()
@click.argument('repo_path', default='.')
def main(repo_path: str):
    """GitWizard - –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git"""
    wizard = GitWizard(repo_path)
    wizard.run()

if __name__ == '__main__':
    main() 